{"version":3,"sources":["components/Editor.js","components/Preview.js","components/Card/Card.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Editor","_ref","onChange","markdownValue","react_default","a","createElement","id","value","Preview","renderer","marked","Renderer","link","href","title","text","concat","setOptions","breaks","dangerouslySetInnerHTML","__html","Card","children","className","Footer","target","rel","initialMd","App","state","handleChange","e","_this","setState","this","components_Card_Card","components_Editor","components_Preview","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAYeA,SATA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,cAAb,OACbC,EAAAC,EAAAC,cAAA,YAAUC,GAAG,SAASC,MAAOL,EAAeD,SAAUA,sBCsBzCO,EAtBC,SAAAR,GAAuB,IAApBE,EAAoBF,EAApBE,cACXO,EAAW,IAAIC,IAAOC,SAS5B,OARAF,EAASG,KAAO,SAASC,EAAMC,EAAOC,GACpC,iCAAAC,OAAkCH,EAAlC,KAAAG,OAA0CD,EAA1C,SAGFL,IAAOO,WAAW,CAChBC,QAAQ,IAIRf,EAAAC,EAAAC,cAAA,OACEC,GAAG,UACHa,wBAAyB,CAAEC,OAAQV,IAAOR,EAAe,CAAEO,iBCMlDY,SAnBF,SAAArB,GAAA,IAAGsB,EAAHtB,EAAGsB,SAAUR,EAAbd,EAAac,MAAb,OACXX,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,QACbpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,eACbpB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,qBAAqBT,GACrCX,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,uBACbpB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,aAChBpB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,aAChBpB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,eAGpBpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,gBAAgBD,MCgBpBE,SA3BA,kBACbrB,EAAAC,EAAAC,cAAA,UAAQkB,UAAU,UAChBpB,EAAAC,EAAAC,cAAA,0BACc,IACZF,EAAAC,EAAAC,cAAA,KACEkB,UAAU,cACVV,KAAK,gCACLY,OAAO,SACPC,IAAI,uBAJN,uBASFvB,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,KACEkB,UAAU,cACVV,KAAK,kDACLY,OAAO,SACPC,IAAI,uBAJN,iBCXAC,EAAS,ioBAqEAC,6MAjCbC,MAAQ,CACN3B,cAAeyB,KAGjBG,aAAe,SAAAC,GACbC,EAAKC,SAAS,CACZ/B,cAAe6B,EAAEN,OAAOlB,iFAInB,IACCL,EAAkBgC,KAAKL,MAAvB3B,cAER,OACEC,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAAA,MAAIkB,UAAU,aAAd,mCACApB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,eACdpB,EAAAC,EAAAC,cAAC8B,EAAD,CAAMrB,MAAM,UACVX,EAAAC,EAAAC,cAAC+B,EAAD,CACEnC,SAAUiC,KAAKJ,aACf5B,cAAeA,KAGnBC,EAAAC,EAAAC,cAAC8B,EAAD,CAAMrB,MAAM,WACVX,EAAAC,EAAAC,cAACgC,EAAD,CAASnC,cAAeA,MAG5BC,EAAAC,EAAAC,cAACiC,EAAD,cA5BUC,aC9BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.969c7db9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Editor = ({ onChange, markdownValue }) => (\r\n  <textarea id=\"editor\" value={markdownValue} onChange={onChange} />\r\n);\r\n\r\nEditor.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  markdownValue: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Editor;\r\n","import React from 'react';\r\nimport marked from 'marked';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Preview = ({ markdownValue }) => {\r\n  const renderer = new marked.Renderer();\r\n  renderer.link = function(href, title, text) {\r\n    return `<a target=\"_blank\" href=${href}>${text}</a>`;\r\n  };\r\n\r\n  marked.setOptions({\r\n    breaks: true\r\n  });\r\n\r\n  return (\r\n    <div\r\n      id=\"preview\"\r\n      dangerouslySetInnerHTML={{ __html: marked(markdownValue, { renderer }) }}\r\n    />\r\n  );\r\n};\r\n\r\nPreview.propTypes = {\r\n  markdownValue: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Preview;\r\n","import React from 'react';\r\nimport './Card.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Card = ({ children, title }) => (\r\n  <div className=\"Card\">\r\n    <div className=\"Card-header\">\r\n      <span className=\"Card-header-title\">{title}</span>\r\n      <div className=\"Card-header-circles\">\r\n        <span className=\"circle-1\" />\r\n        <span className=\"circle-2\" />\r\n        <span className=\"circle-3\" />\r\n      </div>\r\n    </div>\r\n    <div className=\"Card-content\">{children}</div>\r\n  </div>\r\n);\r\n\r\nCard.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => (\r\n  <footer className=\"Footer\">\r\n    <span>\r\n      Created by:{' '}\r\n      <a\r\n        className=\"Footer-link\"\r\n        href=\"https://twitter.com/rmasianjr\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Ricardo Masian Jr.\r\n      </a>\r\n    </span>\r\n    <span> | </span>\r\n    <span>\r\n      <a\r\n        className=\"Footer-link\"\r\n        href=\"https://github.com/rmasianjr/markdown-previewer\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Repo Link\r\n      </a>\r\n    </span>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Editor from './components/Editor';\r\nimport Preview from './components/Preview';\r\nimport Card from './components/Card/Card';\r\nimport Footer from './components/Footer/Footer';\r\n\r\nconst initialMd = `# Greetings Earthlings! \r\n## Welcome to my markdown previewer\r\n\r\n[freeCodeCamp](https://www.freecodecamp.org/)\r\n\r\nFront End Libraries Projects\r\n- Random Quote Machine\r\n- Markdown Previewer\r\n- Drum Machine\r\n- Javascript Calculator\r\n- Pomodoro Clock\r\n\r\nthis is a **bold** text, an _emphasis_ , a _**combined emphasis**_ , and a ~~strikethrough~~\r\n\r\nHead 1 | Head 2 | Head 3\r\n------ |--------| ------\r\nitem1 | item2 | item3\r\nitem4 | item5 | item6\r\nitem7 | item8 | item9\r\n\r\n> example of blockquote\r\n\r\nInline \\`code\\`\r\n\r\n\\`\\`\\`\r\n// code block\r\n\r\nfunction sum (x, y) {\r\n  return x + y;\r\n}\r\n\\`\\`\\`\r\n\r\n![Random Animals](https://loremflickr.com/320/240)\r\n`;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    markdownValue: initialMd\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      markdownValue: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { markdownValue } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"App-title\"> &mdash;Markdown Previewer&mdash;</h1>\r\n        <main className=\"App-content\">\r\n          <Card title=\"Editor\">\r\n            <Editor\r\n              onChange={this.handleChange}\r\n              markdownValue={markdownValue}\r\n            />\r\n          </Card>\r\n          <Card title=\"Preview\">\r\n            <Preview markdownValue={markdownValue} />\r\n          </Card>\r\n        </main>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}